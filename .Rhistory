highCorr
head(carSubset)
data(cars)
head(carSubset)
apropros("cars")
library(caret)
apropros("cars")
apropos("cars")
data(caret::cars)
data(cars)
head(carSubset)
?carSubset
??carSubset
apropos("xls")
get.wd()
wd.get()
wd()
wd()
setwd("C:/Users/huytr_000/OneDrive/Documents/CourseraDataScience/Machine Learning/CourseProject")
hartraining <- read.csv("pml-training.csv")
hartraining <- read.csv("pml-training.csv")
hartesting <- read.csv("pml-testing.csv")
hartraining
str(hartraining)
posforearm <- grep("forearm", names(hartraining))
posbeft <- grep("belt", names(hartraining))
posdumbbell <- grep("dumbbell", names(hartraining))
posarm <- grep("arm", names(hartraining))
posarm <- posarm[!posarm==posforearm]
38*4
names(hartraining[,-c(posarm, posbeft, posforearm, posdumbbell)])
trainingbelt <- hartraining[,posbeft]
posbelt <- posbeft
remove(posbeft)
str(trainingbelt)
trainingforearm <- hartraining[,posforearm]
str(trainingforearm)
str(trainingbelt)
trainingdubbell <- hartraining[,posdumbbell]
trainingarm <- hartraining[,posarm]
trainingothers <- hartraining[,-c(posarm)]
trainingothers <- hartraining[,-c(posarm,posforearm,posbelt,posdumbbell)]
str(trainingothers)
str(trainingdubbell)
dumbbelltraining <- data.frame(trainingdubbell,trainingothers)
plot(dumbbelltraining$class,dumbbelltraining$roll_dumbbell)
plot(dumbbelltraining$class,dumbbelltraining$pitch_dumbbell)
boxplot(dumbbelltraining$class, dumbbelltraining$roll_dumbbell)
nearZeroVar(dumbbelltraining)
dumbbelltraining[,nearZeroVar(dumbbelltraining)]
names(dumbbelltraining[,nearZeroVar(dumbbelltraining)])
str(dumbbelltraining)
nearZeroVar(trainingarm)
nearZeroVar(trainingforearm)
nearZeroVar(trainingbelt)
names(trainingbelt[,nearZeroVar(trainingbelt)])
str(trainingbelt)
trainingbelt$stddev_yaw_belt
trainingdumbbell <- trainingdubbell
remove(trainingdubbell)
nearZeroVar(trainingothers)
trainingothers[,6]
names(trainingothers[,6])
str(trainingothers)
names(trainingothers[,6])
colnames(trainingothers[,6])
str(dumbbelltraining)
dumbtraining <- dumbbelltraining[,-nearZeroVar(dumbbelltraining)]
nearZeroVar(dumbbelltraining)
str(dumbtraining)
near0dumbbelltraining <- nearZeroVar(dumbbelltraining)
transdumb <- preProcess(dumbtraining, method = c("BoxCox", "center", "scale", "pca"))
str(dumbtraining)
highCorr_dumbtraining <- findCorrelation(cor(dumbtraining),cutoff = 0.75)
is.numeric(dumbtraining)
is.numeric(dumbtraining$roll_dumbbell)
#downloading the training data
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "pml-training.csv")
}
#downloading the testing data
if (!file.exists("pml-testing.csv.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "pml-testing.csv")
}
#reading de training and testing data
pml_training<-read.csv("pml-training.csv")
pml_testing<-read.csv("pml-testing.csv")
names<-names(pml_training)
subsetnames<-grep("^accel|classe",names)
training<- subset(pml_training,select=subsetnames)
testing<-subset(pml_testing,select=subsetnames)
str(training)
nearZeroVar(training)
correlations <- cor(training)
correlations <- cor(training[,-classe])
correlations <- cor(training[,-13])
dim(correlations)
corrplot(correlations, order="hclust")
highCorr <- findCorrelation(correlations, cutoff = 0.75)
highCorr
head(highCorr)
filteredtraining <- training[,-highCorr]
?cor
trans <- preProcess(filteredtraining)
trans <- preProcess(filteredtraining, method = c("BoxCox", "center", "scale", "pca"))
trans <- preProcess(filteredtraining[,-12], method = c("BoxCox", "center", "scale", "pca"))
trans
transformed <- predict(trans, filteredtraining)
transformed <- predict(trans, filteredtraining[,-12])
str(transformed)
inTrain<-createDataPartition(y=fileredtraining$classe,p=0.6,list=FALSE)
inTrain<-createDataPartition(y=filteredtraining$classe,p=0.6,list=FALSE)
subtraining<-filteredtraining[inTrain,]
subtesting<-filteredtraining[-inTrain,]
str(subtraining)
skewness(subtraining)
skewness(subtraining[,-12])
is.na(subtraining$accel_belt_x)
is.na(subtraining)
sum(is.na(subtraining))
skewness(subtraining[,-12])
str(subtraining)
skewness(subtraining$accel_belt_x)
skewness(subtraining$accel_belt_y)
preProc <- preProcess(training[, -12], method = c("BoxCox","center","scale","pca"), thresh = 0.95)
preProc <- preProcess(subtraining[, -12], method = c("BoxCox","center","scale","pca"), thresh = 0.95)
preProc
preProc95 <- preProcess(subtraining[, -12], method = c("BoxCox","center","scale","pca"), thresh = 0.95)
preProc85 <- preProcess(subtraining[, -12], method = c("BoxCox","center","scale","pca"), thresh = 0.85)
preProc85
trainingPC <- predict(preProc95, subtraining[, -12])
testingPC <- predict(preProc95, subtesting[, -12])
str(trainingPC)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "cv",  number = 4)
,importance = TRUE)
summary(modelfit)
confusionMatrix(subtesting$classe,predict(modelfit,testingPC))
predicted<-predict(modelfit,newdata=testing)
predicted
trans_testing <- predict(preProc95, testing[, -12])
preProc95
trans_testing <- trans(preProc95,testing[,-12])
trans_testing <- predict(preProc95,testing[,-12])
filteredtesting <- testing[,-highCorr]
trans_testing <- predict(preProc95,filteredtesting[,-12])
predicted<-predict(modelfit,newdata=trans_testing)
predicted
corrplot(correlations, order="hclust")
correlations <- cor(training[,-13]) #Classe
corrplot(correlations, order="hclust")
corrplot(correlations, order="hclust")
f(!require("corrplot")){
install.packages("corrplot")
}
library("c
if(!require("corrplot")){
install.packages("corrplot")
}
library("corrplot")
install.packages("corrplot")
if(!require("corrplot")){
install.packages("corrplot")
}
library("corrplot")
inTrain <- createDataPartition(filteredtraining,p=0.8,times = 3)
library(caret)
inTrain <- createDataPartition(filteredtraining,p=0.8,times = 3)
?createDataPartition
inTrain <- createDataPartition(filteredtraining$classe,p=0.8,times = 3)
inTrain
str(inTrain)
subtraining <- filteredtraining[inTrain,]
subtesting <- filteredtraining[-inTrain,]
plot(density(filteredtraining[inTrain]))
inTrain <- createDataPartition(filteredtraining$classe,p=0.8,times = 3, list=FALSE)
plot(density(filteredtraining[inTrain]))
inTrain <- createDataPartition(filteredtraining$classe,p=0.8,times = 3, list=FALSE)
str(inTrain)
inTrain <- createDataPartition(y=filteredtraining$classe,p=0.8,times = 3, list=FALSE)
subtraining <- filteredtraining[inTrain,]
subtesting <- filteredtraining[-inTrain,]
str(inTrain)
str(subtraining)
preProc95 <- preProcess(subtraining[, -12], method = c("BoxCox","center","scale","pca"), thresh = 0.95)
trainingPC <- predict(preProc95, subtraining[, -12])
testingPC <- predict(preProc95, subtesting[, -12])
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "cv",  number = 4)
,importance = TRUE)
summary(modelfit)
confusionMatrix(subtesting$classe,predict(modelfit,testingPC))
trans_testing <- predict(preProc95,filteredtesting[,-12])
predicted<-predict(modelfit,newdata=trans_testing)
predicted
?train
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "oob",  number = 4)
,importance = TRUE)
summary(modelfit)
confusionMatrix(subtesting$classe,predict(modelfit,testingPC))
trans_testing <- predict(preProc95,filteredtesting[,-12])
predicted<-predict(modelfit,newdata=trans_testing)
predicted
answers <- predicted
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
inTrain <- createDataPartition(y=filteredtraining$classe,p=0.8,times = 3, list=FALSE)
?createDataPartition
plot(modelfit)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,tuneLength = 10,
,trControl = trainControl(method = "repeatedcv",  repeats = 5)
,importance = TRUE)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "repeatedcv",  repeats = 5)
,importance = TRUE)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
, tuneLength = 10,
,trControl = trainControl(method = "repeatedcv",  repeats = 5)
,importance = TRUE)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "repeatedcv",  repeats = 5)
,importance = TRUE)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "oob",  number = 4)
,metric = "ROC"
,importance = TRUE)
modelfit <- train(subtraining$classe ~., method = "rf", data = trainingPC
,trControl = trainControl(method = "oob",  number = 4, classProbs = TRUE)
,metric = "ROC"
,importance = TRUE)
plot(modelfit)
plot(subtraining$classe,trainingPC)
plot(y=subtraining$classe,x=trainingPC$PC1)
plot(y=subtraining$classe,x=trainingPC$PC2)
?createDataPartition
data(oil)
str(oil)
str(oilType)
str(filteredtraining$classe)
install.packages(c("caret", "e1071", "AppliedPredictiveModeling",
"ellipse", "corrplot"),
dependencies = c("Depends", "Suggests"))
install.packages(c("caret", "e1071", "AppliedPredictiveModeling",
"ellipse", "corrplot"),
dependencies = c("Depends", "Suggests"))
install.packages(c("caret", "e1071", "AppliedPredictiveModeling",
str(training)
plot(training$classe,training$accel_belt_x)
plot(training$classe,training$accel_belt_x, xlab="ranking", ylab="accel_belt_x")
library(AppliedPredictiveModeling)
transparentTheme(trans = .4)
library(caret)
featurePlot(x = training[, 1:3],
y = training$classe,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x = training[, 1:2],
y = training$classe,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
training$classe
training$classe["A"]
training$classe=="A"
featurePlot(x = training[, 1:3],
y = training$classe,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 1))
?featurePlot
featurePlot(x = training[, 1:3],
y = training$classe,
plot = "density",
## Add a key at the top
auto.key = list(columns = 3))
ibrary("caret")
library("caret")
corrplot(correlations, order="hclust")
if(!require("corrplot")){
install.packages("corrplot")
}
library("corrplot")
correlations <- cor(training[,-13]) #Classe
corrplot(correlations, order="hclust")
correlations <- cor(training[,-13]) #Classe
corrplot(correlations, order="hclust")
apropos(("cor")
apropos("cor")
?cor
install.packages("knit")
install.packages(c("caret", "foreach", "iterators", "rmarkdown"))
install.packages(c("caret", "foreach", "iterators", "rmarkdown"))
install.packages(c("caret", "foreach", "iterators", "rmarkdown"))
install.packages("knit")
install.packages(c("boot", "caret", "class", "cluster", "codetools", "curl", "data.table", "foreach", "foreign", "httpuv", "iterators", "jsonlite", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "R6", "Rcpp", "rpart", "shiny", "spatial", "survival"), lib="C:/R/R-3.2.0/library")
install.packages(c("boot", "caret", "class", "cluster", "codetools",
install.packages(c("boot", "caret", "class", "cluster", "codetools", "curl", "data.table", "foreach", "foreign", "httpuv", "iterators", "jsonlite", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "R6", "Rcpp", "rpart", "shiny", "spatial", "survival"), lib="C:/R/R-3.2.0/library")
install.packages(c("boot", "caret", "class", "cluster", "codetools",
date: "October 14, 2015"
---
title: 'Coursera: Practical Machine Learning Prediction Assignment'
author: "Benjamin Chan [GitHub](https://github.com/benjamin-chan)"
require(parallel)
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
if(!require("data.table")){
install.packages("data.table")
}
install.packages("curl")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret", repos="http://cran.rstudio.com/")
install.packages("caret", repos = "http://cran.rstudio.com/")
library("caret")
inTrain <- createDataPartition(filteredtraining$classe,p=0.75, list=FALSE)
?createDataPartition
length(filteredtraining$classe)
getwd()
setwd("C:/Users/huytr_000/Documents/GitHub/dataproduct/realestate")
library(shiny)
runApp("realestateprice")
runApp(realestate)
getwd()
setwd("./")
getwd()
setwd("../")
getwd()
runApp("realestate")
runApp("realestate")
library(ISLR)
?ISLR
??ISLR
runExample("07_widgets")
runApp("realestate")
shiny::runApp('realestate')
library(MASS)
data("Boston")
str(Boston)
runExample("03_reactivity")
runExample("07_widgets")
runExample("03_reactivity")
shiny::runApp('realestate')
shiny::runApp('realestate')
runExample("03_reactivity")
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
str(Boston)
pairs(Boston)
lm.fit = lm(medv~., data=Boston)
lm.fit
summary(lm.fit)
library(caret)
correlation <- cor(Boston)
corrplot(correlation)
library(corrplot)
corrplot(correlation)
correlation <- cor(Boston[,-14])
corrplot(correlation)
correlation <- cor(Boston[,-14])
?cor
correlation
findCorrelation(correlation, cutoff = 0.7)
findCorrelation(correlation, cutoff = 0.5)
highcor <- findCorrelation(correlation, cutoff = 0.5)
dat <- Boston[,-c(highcor,14)]
dat
str(dat)
dat <- Boston[,-c(highcor)]
str(dat)
lm.fit2 <- lm(medv~., data=dat)
summary(lm.fit2)
summary(lm.fit)
summary(lm.fit2)
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
is.numeric("4")
as.numeric("4")
as.numeric("a")
is.character(as.numeric("4"))
is.character(as.numeric("a"))
is.numeric(as.numeric("a"))
is.character("4")
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
str(Boston)
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
data("cars")
str(cars)
data("pressure")
str(pressure)
shiny::runApp('realestate')
shiny::runApp('realestate')
car.fit <- lm(Price~., data = cars)
car.fit
summary(car.fit)
car.fit1 <- lm(Price~Mileage+Cylinder+Doors+Leather+convertible+hatchback+sedan, data=cars)
summary(car.fit1)
str(cars)
summary(cars)
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
value <- data.frame(c(Mileage = 2323, Cylinder=4, Doors=2, Leather=1, convertible=1, hatchback=1, sedan=1))
value
predict(fit1, value)
predict(lm.fit1, value)
predict(car.fit1, value)
value <- data.frame(Mileage = 2323, Cylinder=4, Doors=2, Leather=1, convertible=1, hatchback=1, sedan=1)
predict(car.fit1, value)
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
as.number("4")
as.numeric("4")
is.numeric(as.numeric("4"))
is.numeric(as.numeric("ad"))
as.character("4")
is.character("4")
is.character("a")
is.numeric("4")
as.numeric("a")
as.numeric("4")
is.na(as.numeric("4"))
is.na(as.numeric("a"))
is.na(as.numeric("a4"))
is.na(as.numeric("44"))
shiny::runApp('realestate')
shiny::runApp('realestate')
is.na(as.numeric(""))
is.na(as.numeric("a"))
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
library(scales)
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
predict(car.fit1, value)
predict(car.fit1, value, interval = "confidence")
a <- predict(car.fit1, value, interval = "confidence")
a
a[1]
a[1]a[2]
a[2]
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
shiny::runApp('realestate')
